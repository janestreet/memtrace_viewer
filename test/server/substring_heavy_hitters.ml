open! Core

module CharHH = Memtrace_viewer_native.For_testing.Substring_heavy_hitters.Make (struct
    include Char

    let dummy = Char.max_value
  end)

let process lines =
  let heavy_hitters = CharHH.create ~tolerance:0.01 in
  let (_ : string) =
    List.fold lines ~init:"" ~f:(fun prev_line line ->
      let common_prefix = String.common_prefix2_length prev_line line in
      let after_prefix = String.drop_prefix line common_prefix in
      let word = after_prefix |> String.to_array in
      CharHH.insert heavy_hitters word ~common_prefix ~count:1;
      line)
  in
  CharHH.calculate_totals heavy_hitters ~heaviness_frequency:0.1;
  heavy_hitters
;;

let print pred heavy_hitters =
  let root = CharHH.root heavy_hitters in
  let rec loop node =
    if pred heavy_hitters node
    then
      eprint_s
        [%message
          ""
            (CharHH.Node.label node |> Array.to_list |> String.of_char_list)
            ~total_count:(CharHH.Node.total_count node : int)];
    CharHH.Node.iter_children node ~f:loop ~root
  in
  loop (CharHH.Node.Root.node root)
;;

let lines =
  {|
    To be, or not to be, that is the question:
    Whether 'tis nobler in the mind to suffer
    The slings and arrows of outrageous fortune,
    Or to take arms against a sea of troubles
    And by opposing end them. To die—to sleep,
    No more; and by a sleep to say we end
    The heart-ache and the thousand natural shocks
    That flesh is heir to: 'tis a consummation
    Devoutly to be wish'd. To die, to sleep;
    To sleep, perchance to dream—ay, there's the rub:
    For in that sleep of death what dreams may come,
    When we have shuffled off this mortal coil,
    Must give us pause—there's the respect
    That makes calamity of so long life.
    For who would bear the whips and scorns of time,
    Th'oppressor's wrong, the proud man's contumely,
    The pangs of dispriz'd love, the law's delay,
    The insolence of office, and the spurns
    That patient merit of th'unworthy takes,
    When he himself might his quietus make
    With a bare bodkin? Who would fardels bear,
    To grunt and sweat under a weary life,
    But that the dread of something after death,
    The undiscovere'd country, from whose bourn
    No traveller returns, puzzles the will,
    And makes us rather bear those ills we have
    Than fly to others that we know not of?
    Thus conscience doth make cowards of us all,
    And thus the native hue of resolution
    Is sicklied o'er with the pale cast of thought,
    And enterprises of great pith and moment
    With this regard their currents turn awry
    And lose the name of action.
  |}
  |> String.split_lines
  |> List.map ~f:String.strip
  |> List.filter ~f:(fun s -> not (String.is_empty s))
;;

let%expect_test "shakespeare" =
  let heavy_hitters = process lines in
  print CharHH.is_heavy heavy_hitters;
  [%expect
    {|
    ("And " (total_count 5))
    (Tha (total_count 4))
    ("The " (total_count 5))
    ("To " (total_count 5))
    (Wh (total_count 4))
    (" a " (total_count 5))
    (" and " (total_count 7))
    (" b" (total_count 11))
    (" be" (total_count 6))
    (" co" (total_count 7))
    (" d" (total_count 10))
    (" f" (total_count 5))
    (" i" (total_count 6))
    (" l" (total_count 6))
    (" m" (total_count 12))
    (" make" (total_count 4))
    (" n" (total_count 6))
    (" o" (total_count 22))
    (" of " (total_count 14))
    (" of t" (total_count 4))
    (" p" (total_count 8))
    (" pa" (total_count 4))
    (" re" (total_count 4))
    (" s" (total_count 17))
    (" sleep" (total_count 5))
    (" that " (total_count 4))
    (" the " (total_count 14))
    (" to " (total_count 8))
    (" u" (total_count 5))
    (" w" (total_count 15))
    (" we " (total_count 4))
    (" wh" (total_count 4))
    (al (total_count 5))
    (am (total_count 4))
    (an (total_count 12))
    (ar (total_count 11))
    (at (total_count 17))
    (ay (total_count 4))
    (c (total_count 23))
    (ce (total_count 4))
    ("d " (total_count 24))
    ("d the" (total_count 4))
    (de (total_count 5))
    (di (total_count 4))
    ("e " (total_count 41))
    ("e h" (total_count 5))
    (e, (total_count 9))
    ("e, " (total_count 5))
    (ear (total_count 5))
    (eat (total_count 4))
    (el (total_count 5))
    (en (total_count 10))
    (ent (total_count 4))
    ("er " (total_count 7))
    (es (total_count 11))
    ("es " (total_count 4))
    (et (total_count 4))
    (f (total_count 32))
    (ff (total_count 4))
    (' (total_count 13))
    ("'s " (total_count 5))
    (g (total_count 14))
    ("hat " (total_count 8))
    (he (total_count 33))
    (hi (total_count 6))
    (ho (total_count 7))
    (hu (total_count 4))
    (ie (total_count 6))
    (in (total_count 9))
    (is (total_count 11))
    ("is " (total_count 7))
    ("ith " (total_count 4))
    (k (total_count 10))
    (, (total_count 24))
    (", th" (total_count 4))
    (le (total_count 13))
    (li (total_count 4))
    (ll (total_count 4))
    (me (total_count 7))
    (. (total_count 4))
    ("n " (total_count 6))
    ("nd th" (total_count 4))
    (ng (total_count 6))
    (no (total_count 4))
    (ns (total_count 7))
    (om (total_count 4))
    (on (total_count 9))
    (or (total_count 9))
    (os (total_count 4))
    (ot (total_count 4))
    (ou (total_count 11))
    (p (total_count 22))
    (pr (total_count 4))
    ("r " (total_count 15))
    ("r t" (total_count 4))
    (ra (total_count 4))
    (re (total_count 15))
    (rea (total_count 4))
    (ro (total_count 5))
    (rt (total_count 4))
    ("s a" (total_count 5))
    ("s of " (total_count 5))
    ("s the " (total_count 5))
    (se (total_count 7))
    (sh (total_count 4))
    (so (total_count 5))
    (st (total_count 4))
    ("t " (total_count 20))
    (ther (total_count 5))
    (ti (total_count 9))
    (tion (total_count 4))
    ("to s" (total_count 4))
    (tr (total_count 4))
    (tu (total_count 6))
    (un (total_count 6))
    (urn (total_count 4))
    ("us " (total_count 7))
    (ut (total_count 4))
    (ve (total_count 7))
    (w (total_count 22))
    ("y " (total_count 9))
    (y, (total_count 4))
    |}];
  print CharHH.contains_heavy heavy_hitters;
  [%expect
    {|
    ("" (total_count 33))
    ("And " (total_count 5))
    (T (total_count 16))
    (Th (total_count 11))
    (Tha (total_count 4))
    ("The " (total_count 5))
    ("To " (total_count 5))
    (W (total_count 6))
    (Wh (total_count 4))
    (" " (total_count 223))
    (" a" (total_count 19))
    (" a " (total_count 5))
    (" and " (total_count 7))
    (" b" (total_count 11))
    (" be" (total_count 6))
    (" c" (total_count 10))
    (" co" (total_count 7))
    (" d" (total_count 10))
    (" f" (total_count 5))
    (" h" (total_count 8))
    (" i" (total_count 6))
    (" l" (total_count 6))
    (" m" (total_count 12))
    (" ma" (total_count 6))
    (" make" (total_count 4))
    (" n" (total_count 6))
    (" o" (total_count 22))
    (" of" (total_count 17))
    (" of " (total_count 14))
    (" of t" (total_count 4))
    (" p" (total_count 8))
    (" pa" (total_count 4))
    (" r" (total_count 6))
    (" re" (total_count 4))
    (" s" (total_count 17))
    (" sl" (total_count 6))
    (" sleep" (total_count 5))
    (" t" (total_count 43))
    (" th" (total_count 28))
    (" that " (total_count 4))
    (" the" (total_count 17))
    (" the " (total_count 14))
    (" to" (total_count 9))
    (" to " (total_count 8))
    (" u" (total_count 5))
    (" w" (total_count 15))
    (" we" (total_count 5))
    (" we " (total_count 4))
    (" wh" (total_count 4))
    (a (total_count 79))
    ("a " (total_count 6))
    (ake (total_count 6))
    (al (total_count 5))
    (am (total_count 4))
    (an (total_count 12))
    ("and " (total_count 8))
    (ar (total_count 11))
    (at (total_count 17))
    ("at " (total_count 10))
    (ay (total_count 4))
    (b (total_count 14))
    (be (total_count 6))
    (c (total_count 23))
    (ce (total_count 4))
    (co (total_count 9))
    (d (total_count 41))
    ("d " (total_count 24))
    ("d t" (total_count 6))
    ("d th" (total_count 5))
    ("d the" (total_count 4))
    (de (total_count 5))
    (di (total_count 4))
    (e (total_count 136))
    ("e " (total_count 41))
    ("e h" (total_count 5))
    (e, (total_count 9))
    ("e, " (total_count 5))
    (ea (total_count 13))
    (ear (total_count 5))
    (eat (total_count 4))
    (eep (total_count 5))
    (el (total_count 5))
    (en (total_count 10))
    (ent (total_count 4))
    (ep (total_count 5))
    (er (total_count 15))
    ("er " (total_count 7))
    (es (total_count 11))
    ("es " (total_count 4))
    (et (total_count 4))
    (f (total_count 32))
    ("f " (total_count 16))
    ("f t" (total_count 5))
    (ff (total_count 4))
    (' (total_count 13))
    ("'s " (total_count 5))
    (g (total_count 14))
    (h (total_count 76))
    ("h " (total_count 7))
    (ha (total_count 12))
    ("hat " (total_count 8))
    (he (total_count 33))
    ("he " (total_count 21))
    (her (total_count 5))
    (hi (total_count 6))
    (ho (total_count 7))
    (hu (total_count 4))
    (i (total_count 52))
    (ie (total_count 6))
    (in (total_count 9))
    (ion (total_count 4))
    (is (total_count 11))
    ("is " (total_count 7))
    (it (total_count 6))
    ("ith " (total_count 4))
    (k (total_count 10))
    (ke (total_count 6))
    (, (total_count 24))
    (", " (total_count 10))
    (", t" (total_count 5))
    (", th" (total_count 4))
    (l (total_count 41))
    (le (total_count 13))
    (leep (total_count 5))
    (li (total_count 4))
    (ll (total_count 4))
    (m (total_count 27))
    (ma (total_count 7))
    (make (total_count 4))
    (me (total_count 7))
    (. (total_count 4))
    (n (total_count 63))
    ("n " (total_count 6))
    (nd (total_count 18))
    ("nd " (total_count 15))
    ("nd t" (total_count 5))
    ("nd th" (total_count 4))
    (ng (total_count 6))
    (no (total_count 4))
    (ns (total_count 7))
    (nt (total_count 7))
    (o (total_count 92))
    ("o " (total_count 19))
    ("o s" (total_count 5))
    (of (total_count 17))
    ("of " (total_count 14))
    ("of t" (total_count 4))
    (om (total_count 4))
    (on (total_count 9))
    (or (total_count 9))
    (os (total_count 4))
    (ot (total_count 4))
    (ou (total_count 11))
    (p (total_count 22))
    (pa (total_count 4))
    (pr (total_count 4))
    (r (total_count 68))
    ("r " (total_count 15))
    ("r t" (total_count 4))
    (ra (total_count 4))
    (re (total_count 15))
    (rea (total_count 4))
    (rn (total_count 5))
    (ro (total_count 5))
    (rt (total_count 4))
    (s (total_count 81))
    ("s " (total_count 36))
    ("s a" (total_count 5))
    ("s of " (total_count 5))
    ("s t" (total_count 7))
    ("s th" (total_count 6))
    ("s the " (total_count 5))
    (se (total_count 7))
    (sh (total_count 4))
    (sl (total_count 6))
    (sleep (total_count 5))
    (so (total_count 5))
    (st (total_count 4))
    (t (total_count 102))
    ("t " (total_count 20))
    (th (total_count 41))
    ("th " (total_count 6))
    ("that " (total_count 4))
    (the (total_count 21))
    ("the " (total_count 14))
    (ther (total_count 5))
    (ti (total_count 9))
    (tion (total_count 4))
    (to (total_count 10))
    ("to " (total_count 9))
    ("to s" (total_count 4))
    (tr (total_count 4))
    (tu (total_count 6))
    (u (total_count 40))
    (un (total_count 6))
    (ur (total_count 6))
    (urn (total_count 4))
    (us (total_count 10))
    ("us " (total_count 7))
    (ut (total_count 4))
    (v (total_count 8))
    (ve (total_count 7))
    (w (total_count 22))
    (we (total_count 6))
    ("we " (total_count 4))
    (wh (total_count 4))
    (y (total_count 14))
    ("y " (total_count 9))
    (y, (total_count 4))
    |}]
;;

let common_prefixes =
  let state = Random.State.make [| 6; 4; 3; 2; 1 |] in
  List.map ~f:(fun line -> Random.State.int state (String.length line)) lines
;;

let repetitive_lines =
  let _, lines =
    List.fold2_exn lines common_prefixes ~init:("", []) ~f:(fun (prev, acc) line rep ->
      let common_prefix = min (String.length prev) (String.length line) in
      let rest = String.length line - common_prefix in
      let line =
        String.concat
          [ String.sub prev ~pos:0 ~len:common_prefix
          ; String.sub line ~pos:common_prefix ~len:rest
          ]
      in
      let repeat = String.sub line ~pos:0 ~len:rep in
      repeat, line :: acc)
  in
  List.rev lines
;;

let%expect_test "repetitive_lines" =
  List.iter ~f:print_endline repetitive_lines;
  [%expect
    {|
    To be, or not to be, that is the question:
    To be, or no nobler in the mind to suffer
    To be, or no nobler in the mind to suffeune,
    To be, or no nobler in the mind  troubles
    To be, or no nobler in the midie—to sleep,
    To be, or no nobler inp to say we end
    Toe heart-ache and the thousand natural shocks
    Toe heart-ais heir to: 'tis a consummation
    Devoutly to be wish'd. To die, to sleep;
    Devoutly to be wish'd. To di—ay, there's the rub:
    Devoun that sleep of death what dreams may come,
    Devoun that  shuffled off this mortal coil,
    Devoun that  shuffled off thishe respect
    Devoun that  shuffled ofo long life.
    Devoun that  shuffled ofo longnd scorns of time,
    Devoun that  shuffng, the proud man's contumely,
    Devopangs of dispriz'd love, the law's delay,
    Dhe insolence of office, and the spurns
    Dhe insolence of officeh'unworthy takes,
    Dhe insolence of offt his quietus make
    Dhe in bare bodkin? Who would fardels bear,
    Dhe in bare bodkin? Who would fardels
    Dhe in bare bodkid of something after death,
    Dhe in bare bodkid of somethiom whose bourn
    Dhe in bare bodkid of somethiomhe will,
    Dhe in bares rather bear those ills we have
    Dhe in bares rather bat we know not of?
    Dhe in bares rather bat we kwards of us all,
    Dhe in s the native hue of resolution
    Dhe in s the native h the pale cast of thought,
    Dhe in s the nativegreat pith and moment
    Dhe in s  regard their currents turn awry
    Dhe inse the name of action.
    |}]
;;

let%expect_test "repetitive shakespeare" =
  let heavy_hitters = process repetitive_lines in
  print CharHH.is_heavy heavy_hitters;
  [%expect
    {|
    (D (total_count 25))
    (Devou (total_count 8))
    ("Devoun that  shuffled of" (total_count 4))
    ("Dhe in bare bodki" (total_count 5))
    ("Dhe in s " (total_count 4))
    ("Dhe ins" (total_count 4))
    ("To " (total_count 8))
    ("To be, or no nobler in the mi" (total_count 4))
    (" a" (total_count 8))
    (" ba" (total_count 10))
    (" co" (total_count 4))
    (" d" (total_count 7))
    (" in" (total_count 21))
    (" l" (total_count 5))
    (" m" (total_count 9))
    (" nat" (total_count 4))
    (" no" (total_count 12))
    (" of " (total_count 13))
    (" off" (total_count 5))
    (" r" (total_count 7))
    (" s" (total_count 21))
    (" th" (total_count 29))
    (" the" (total_count 17))
    (" the na" (total_count 4))
    (" to" (total_count 8))
    (" to s" (total_count 4))
    (" w" (total_count 11))
    (" we " (total_count 4))
    (al (total_count 4))
    ("and " (total_count 4))
    (ard (total_count 4))
    (ath (total_count 5))
    (ati (total_count 4))
    (ay (total_count 4))
    (b (total_count 34))
    (c (total_count 16))
    (ce (total_count 5))
    ("d " (total_count 20))
    (de (total_count 5))
    (di (total_count 4))
    ("e h" (total_count 5))
    ("e i" (total_count 17))
    ("e of " (total_count 5))
    ("e, " (total_count 10))
    (ea (total_count 8))
    (ear (total_count 4))
    (el (total_count 4))
    (en (total_count 6))
    ("er " (total_count 9))
    (et (total_count 4))
    (f (total_count 44))
    ("f t" (total_count 4))
    (' (total_count 8))
    ("hat " (total_count 8))
    ("he " (total_count 34))
    (ho (total_count 7))
    (id (total_count 4))
    (in (total_count 27))
    (is (total_count 9))
    ("is " (total_count 5))
    (k (total_count 10))
    (, (total_count 25))
    (", th" (total_count 4))
    (l (total_count 40))
    (le (total_count 17))
    (m (total_count 22))
    (ma (total_count 4))
    (. (total_count 4))
    ("n " (total_count 23))
    ("nd t" (total_count 4))
    (ng (total_count 5))
    ("o be" (total_count 9))
    (ome (total_count 5))
    (on (total_count 8))
    (or (total_count 9))
    (ou (total_count 15))
    (p (total_count 11))
    ("r " (total_count 18))
    (ra (total_count 4))
    (re (total_count 15))
    (res (total_count 5))
    (rn (total_count 4))
    (rt (total_count 4))
    ("s " (total_count 25))
    ("s the " (total_count 5))
    (sh (total_count 9))
    (sol (total_count 4))
    ("t " (total_count 15))
    (ther (total_count 4))
    (thi (total_count 5))
    (tion (total_count 4))
    ("to " (total_count 8))
    (tu (total_count 4))
    (u (total_count 37))
    (un (total_count 8))
    (ur (total_count 5))
    (ve (total_count 5))
    (w (total_count 16))
    ("y " (total_count 5))
    |}];
  print CharHH.contains_heavy heavy_hitters;
  [%expect
    {|
    ("" (total_count 33))
    (D (total_count 25))
    (Devo (total_count 9))
    (Devou (total_count 8))
    ("Devoun that " (total_count 6))
    ("Devoun that  shuff" (total_count 5))
    ("Devoun that  shuffled of" (total_count 4))
    ("Dhe in" (total_count 16))
    ("Dhe in " (total_count 12))
    ("Dhe in bare" (total_count 8))
    ("Dhe in bare bodki" (total_count 5))
    ("Dhe in s " (total_count 4))
    ("Dhe ins" (total_count 4))
    (To (total_count 10))
    ("To " (total_count 8))
    ("To be, or no" (total_count 6))
    ("To be, or no nobler in" (total_count 5))
    ("To be, or no nobler in the mi" (total_count 4))
    (" " (total_count 240))
    ("  " (total_count 7))
    ("  shuff" (total_count 5))
    ("  shuffled of" (total_count 4))
    (" a" (total_count 8))
    (" b" (total_count 27))
    (" ba" (total_count 10))
    (" bare" (total_count 8))
    (" bare bodki" (total_count 5))
    (" be" (total_count 11))
    (" be, " (total_count 7))
    (" be, or no" (total_count 6))
    (" be, or no nobler in" (total_count 5))
    (" be, or no nobler in the mi" (total_count 4))
    (" bo" (total_count 6))
    (" bodki" (total_count 5))
    (" c" (total_count 6))
    (" co" (total_count 4))
    (" d" (total_count 7))
    (" h" (total_count 7))
    (" i" (total_count 23))
    (" in" (total_count 21))
    (" in " (total_count 16))
    (" in bare" (total_count 8))
    (" in bare bodki" (total_count 5))
    (" in s " (total_count 4))
    (" in the mi" (total_count 4))
    (" ins" (total_count 4))
    (" l" (total_count 5))
    (" m" (total_count 9))
    (" mi" (total_count 4))
    (" n" (total_count 17))
    (" na" (total_count 5))
    (" nat" (total_count 4))
    (" no" (total_count 12))
    (" no nobler in" (total_count 5))
    (" no nobler in the mi" (total_count 4))
    (" nobler in" (total_count 5))
    (" nobler in the mi" (total_count 4))
    (" o" (total_count 27))
    (" of" (total_count 21))
    (" of " (total_count 13))
    (" off" (total_count 5))
    (" or no" (total_count 6))
    (" or no nobler in" (total_count 5))
    (" or no nobler in the mi" (total_count 4))
    (" r" (total_count 7))
    (" s" (total_count 21))
    (" s " (total_count 4))
    (" sh" (total_count 6))
    (" shuff" (total_count 5))
    (" shuffled of" (total_count 4))
    (" t" (total_count 41))
    (" th" (total_count 29))
    (" that " (total_count 7))
    (" that  shuff" (total_count 5))
    (" that  shuffled of" (total_count 4))
    (" the" (total_count 17))
    (" the " (total_count 15))
    (" the mi" (total_count 4))
    (" the na" (total_count 4))
    (" to" (total_count 8))
    (" to " (total_count 7))
    (" to s" (total_count 4))
    (" w" (total_count 11))
    (" we " (total_count 4))
    (a (total_count 64))
    (al (total_count 4))
    (an (total_count 6))
    ("and " (total_count 4))
    (ar (total_count 16))
    (ard (total_count 4))
    (are (total_count 8))
    ("are bodki" (total_count 5))
    (at (total_count 21))
    ("at " (total_count 11))
    ("at  shuff" (total_count 5))
    ("at  shuffled of" (total_count 4))
    (ath (total_count 5))
    (ati (total_count 4))
    (ay (total_count 4))
    (b (total_count 34))
    (ba (total_count 10))
    (bare (total_count 8))
    ("bare bodki" (total_count 5))
    (be (total_count 11))
    ("be, " (total_count 7))
    ("be, or no" (total_count 6))
    ("be, or no nobler in" (total_count 5))
    ("be, or no nobler in the mi" (total_count 4))
    (ble (total_count 6))
    ("bler in" (total_count 5))
    ("bler in the mi" (total_count 4))
    (bo (total_count 6))
    (bodki (total_count 5))
    (c (total_count 16))
    (ce (total_count 5))
    (co (total_count 5))
    (d (total_count 39))
    ("d " (total_count 20))
    ("d of" (total_count 7))
    ("d t" (total_count 5))
    (de (total_count 5))
    (di (total_count 4))
    (dki (total_count 5))
    (e (total_count 143))
    ("e " (total_count 58))
    ("e bo" (total_count 6))
    ("e bodki" (total_count 5))
    ("e h" (total_count 5))
    ("e i" (total_count 17))
    ("e in" (total_count 16))
    ("e in " (total_count 12))
    ("e in bare" (total_count 8))
    ("e in bare bodki" (total_count 5))
    ("e in s " (total_count 4))
    ("e ins" (total_count 4))
    ("e mi" (total_count 4))
    ("e na" (total_count 4))
    ("e of " (total_count 5))
    (e, (total_count 13))
    ("e, " (total_count 10))
    ("e, or no" (total_count 6))
    ("e, or no nobler in" (total_count 5))
    ("e, or no nobler in the mi" (total_count 4))
    (ea (total_count 8))
    (ear (total_count 4))
    ("ed of" (total_count 4))
    (el (total_count 4))
    (en (total_count 6))
    (er (total_count 11))
    ("er " (total_count 9))
    ("er in" (total_count 5))
    ("er in the mi" (total_count 4))
    (es (total_count 8))
    (et (total_count 4))
    (evo (total_count 9))
    (evou (total_count 8))
    ("evoun that " (total_count 6))
    ("evoun that  shuff" (total_count 5))
    ("evoun that  shuffled of" (total_count 4))
    (f (total_count 44))
    ("f " (total_count 15))
    ("f t" (total_count 4))
    (ff (total_count 12))
    ("ffled of" (total_count 4))
    ("fled of" (total_count 4))
    (' (total_count 8))
    (g (total_count 8))
    (h (total_count 79))
    (ha (total_count 9))
    ("hat " (total_count 8))
    ("hat  shuff" (total_count 5))
    ("hat  shuffled of" (total_count 4))
    (he (total_count 42))
    ("he " (total_count 34))
    ("he in" (total_count 16))
    ("he in " (total_count 12))
    ("he in bare" (total_count 8))
    ("he in bare bodki" (total_count 5))
    ("he in s " (total_count 4))
    ("he ins" (total_count 4))
    ("he mi" (total_count 4))
    ("he na" (total_count 4))
    (her (total_count 4))
    (hi (total_count 6))
    (ho (total_count 7))
    (hu (total_count 6))
    (huff (total_count 5))
    ("huffled of" (total_count 4))
    (i (total_count 64))
    (id (total_count 4))
    (in (total_count 27))
    ("in " (total_count 16))
    ("in bare" (total_count 8))
    ("in bare bodki" (total_count 5))
    ("in s " (total_count 4))
    ("in the mi" (total_count 4))
    (ins (total_count 4))
    (io (total_count 6))
    (ion (total_count 4))
    (is (total_count 9))
    ("is " (total_count 5))
    (k (total_count 10))
    (ki (total_count 5))
    (, (total_count 25))
    (", " (total_count 12))
    (", or no" (total_count 6))
    (", or no nobler in" (total_count 5))
    (", or no nobler in the mi" (total_count 4))
    (", t" (total_count 5))
    (", th" (total_count 4))
    (l (total_count 40))
    (le (total_count 17))
    ("led of" (total_count 4))
    ("ler in" (total_count 5))
    ("ler in the mi" (total_count 4))
    (m (total_count 22))
    (ma (total_count 4))
    (me (total_count 8))
    (mi (total_count 4))
    (. (total_count 4))
    (n (total_count 79))
    ("n " (total_count 23))
    ("n bare" (total_count 8))
    ("n bare bodki" (total_count 5))
    ("n s " (total_count 4))
    ("n th" (total_count 10))
    ("n that " (total_count 6))
    ("n that  shuff" (total_count 5))
    ("n that  shuffled of" (total_count 4))
    ("n the mi" (total_count 4))
    (na (total_count 5))
    (nat (total_count 4))
    (nd (total_count 9))
    ("nd " (total_count 8))
    ("nd t" (total_count 4))
    (ng (total_count 5))
    (no (total_count 13))
    ("no nobler in" (total_count 5))
    ("no nobler in the mi" (total_count 4))
    ("nobler in" (total_count 5))
    ("nobler in the mi" (total_count 4))
    (ns (total_count 7))
    (o (total_count 111))
    ("o " (total_count 25))
    ("o be" (total_count 9))
    ("o be, " (total_count 7))
    ("o be, or no" (total_count 6))
    ("o be, or no nobler in" (total_count 5))
    ("o be, or no nobler in the mi" (total_count 4))
    ("o nobler in" (total_count 5))
    ("o nobler in the mi" (total_count 4))
    ("o s" (total_count 5))
    ("obler in" (total_count 5))
    ("obler in the mi" (total_count 4))
    (odki (total_count 5))
    (of (total_count 21))
    ("of " (total_count 13))
    (off (total_count 5))
    (ol (total_count 4))
    (om (total_count 7))
    (ome (total_count 5))
    (on (total_count 8))
    (or (total_count 9))
    ("or no" (total_count 6))
    ("or no nobler in" (total_count 5))
    ("or no nobler in the mi" (total_count 4))
    (ou (total_count 15))
    ("oun that " (total_count 6))
    ("oun that  shuff" (total_count 5))
    ("oun that  shuffled of" (total_count 4))
    (p (total_count 11))
    (r (total_count 57))
    ("r " (total_count 18))
    ("r in" (total_count 5))
    ("r in the mi" (total_count 4))
    ("r no" (total_count 6))
    ("r no nobler in" (total_count 5))
    ("r no nobler in the mi" (total_count 4))
    (ra (total_count 4))
    (rd (total_count 4))
    (re (total_count 15))
    ("re bodki" (total_count 5))
    (res (total_count 5))
    (rn (total_count 4))
    (rt (total_count 4))
    (s (total_count 62))
    ("s " (total_count 25))
    ("s t" (total_count 6))
    ("s the " (total_count 5))
    (sh (total_count 9))
    (shuff (total_count 5))
    ("shuffled of" (total_count 4))
    (so (total_count 7))
    (sol (total_count 4))
    (t (total_count 88))
    ("t " (total_count 15))
    ("t  shuff" (total_count 5))
    ("t  shuffled of" (total_count 4))
    (th (total_count 39))
    ("that " (total_count 7))
    ("that  shuff" (total_count 5))
    ("that  shuffled of" (total_count 4))
    (the (total_count 20))
    ("the " (total_count 15))
    ("the mi" (total_count 4))
    ("the na" (total_count 4))
    (ther (total_count 4))
    (thi (total_count 5))
    (ti (total_count 9))
    (tion (total_count 4))
    (to (total_count 9))
    ("to " (total_count 8))
    ("to s" (total_count 5))
    (tu (total_count 4))
    (u (total_count 37))
    (uff (total_count 7))
    ("uffled of" (total_count 4))
    (un (total_count 8))
    ("un that " (total_count 6))
    ("un that  shuff" (total_count 5))
    ("un that  shuffled of" (total_count 4))
    (ur (total_count 5))
    (v (total_count 14))
    (ve (total_count 5))
    (vo (total_count 9))
    (vou (total_count 8))
    ("voun that " (total_count 6))
    ("voun that  shuff" (total_count 5))
    ("voun that  shuffled of" (total_count 4))
    (w (total_count 16))
    ("we " (total_count 4))
    (y (total_count 9))
    ("y " (total_count 5))
    |}]
;;
